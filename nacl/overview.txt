~~~ WHAT ON EARTH IS NATIVE CLIENT (ALSO KNOWN AS NACL)?

This post attempts to describe NaCl from the perspective of the original
NaCl paper, from 2009. It has since changed and expanded, both in terms of
architectures supported, design, portability and use cases. However, the original
idea behind sandboxing a native application using validation, restricted address space, and validation, largely stays the same.

That being said, I'm going to ignore those differences, and write about
NaCl as if it's 2009. That should be the easiest to understand -- and I'll talk
about updates in future posts.

Link to the original NaCl paper: http://research.google.com/pubs/archive/34913.pdf

~~~ WHY WAS NACL MADE?

Basically, the Internet. In 2009, if you wanted to do some computation in a web
browser, your options included:

  1) Javascript (which lacked compatibility with native code, as well as suffered
in performance) or

  2) Extensions such as ActiveX and NPAPI. For those who don't know, ActiveX and
NPAPI provide a mechanism to let native code ignore the security of the
browser, and run regardless, through a plugin.

Yes, I'm doing some handwaving here, but that's the general idea.

For those of you reading who remember those days, you'll probably remember
pop-up boxes saying things like "ARE YOU SURE YOU WANT TO RUN THIS NATIVE
CODE?", which, as we all know, is essentially the ideal security handshake, as
all end-users have a perfect idea of what binary blobs should and shouldn't run
on their system with essentially unconstrained access.

/sarcasm.

Okay, so what are the options? Running Javascript, for less than optimal code,
or running unsafe code. That sucks. We want our users to run good code safely.

What if we had a mechanism to let this native code run safely?

Thus, Native Client was made.

~~~ WAIT, SO WHAT'S NATIVE CLIENT?

It's a sandbox that lets untrusted native code (originally just x86
instructions) execute safely.

~~~ WHAT'S A SANDBOX?

"Sandboxing" and "sandboxes" basically are just an idea. It's the idea of letting a
program have access to some controlled resources, without the ability to escape, mess
with the host system, or interact with other programs.

Some people get confused by the term "sandbox" because they think sandboxes are
specific programs that exist on the program. Some sort of "sandbox.out" executable.

Nope. A sandbox is an idea. Native Client is a "sandboxing" environment, since
it wants to constrain untrusted code. Another example of a sandbox includes
virtual machines -- VMs let programs execute, but access to the host resources
are mediated by the VMM.

That being said, if your sandbox lets untrusted code escape and manipulate resources
on your host, then your sandbox sucks. It's really not doing much sandboxing at all.

~~~ OH, OKAY. NEAT... WAIT.

What?

~~~ WHEN YOU DEFINED NATIVE CLIENT, YOU DIDN'T MENTION ANYTHING ABOUT A WEB BROWSER.

Oh. Yeah.

~~~ WHY NOT?

Because NaCl doesn't need to run in a web browser. Yes, it's primary use case has been
living inside Chrome, but if you're throwing around executables from the command line,
you can also use NaCl to sandbox programs.

~~~ SO WHAT'S NACL? AN EXECUTABLE? A COMPILER?

Err... NaCl is a few things. We'll get into the full details next time.

TODO(smklein): Maybe drop a link here.
