(psst... read "start_here.txt" first, if you haven't)

~~~ SO WHAT'S NACL? AN EXECUTABLE? A COMPILER?

NaCl is more of an ecosystem. There are a bunch of small components which work
together.

Let's say you're a developer. You want to run your entire codebase (which,
fortunately for this example, consists of the file "hello.c") through NaCl.

1) Build your source code! Use the NaCl toolchain to build a "NaCl Executable",
   or "nexe". It's an ELF file, but with some minor tweaks so it can be
   verified as safe.

SOURCE CODE                              COMPILED CODE
hello.c     ---> [NaCl toolchain] --->   hello.nexe

  NaCl Toolchain: NaCl provides some tools for compiling and linking your
  source code into these safe binaries. This way, as a developer, you can
  automatically meet the safety constraints if your code compiles. Think
  "nacl-clang", "nacl-ld", etc.

2) Send your code to an end user!

COMPILED CODE                            COMPILED CODE
hello.nexe  ---> [The Internet]   --->   hello.nexe

  Your executable shouldn't be changed by this step. One would hope.

3) The end user verifies that the nexe can be run safely.

COMPILED CODE                            COMPILED CODE
hello.nexe  ---> [NaCl Validator] --->   hello.nexe

  NaCl Validator: NaCl defines some rules for what it considers to be a 'safe'
  binary.  A static analyzer is used to confirm these rule have been satisfied.
  If a binary doesn't conform to these rules, it can't run. Once again,
  'hello.nexe' shouldn't be changed by this step.

4) End user starts executing your code.

COMPILED CODE                            EXECUTING CODE
hello.nexe  ---> [NaCl loader]    --->   hello.nexe (executing)

  Yeah, a custom NaCl loader is used to constrain this executable before it
  even starts. If your '.text' segment is writable, and you can access it,
  that's not very safe, is it? After this custom loader has finished starting
  the code, all accesses to system resources are mediated by the NaCl runtime.

  NaCl Runtime: We don't want untrusted binaries to have direct access to
  system calls.  This is how normal executables interact with the OS!
  Unconstrained access here would be just as bad as running these binaries
  WITHOUT NaCl. Thus, a "service runtime" exists, which lets controlled access
  to native system calls, in a safe way.

  No pop-up boxes. No need to trust 'hello.nexe'. If it runs, it's safe.

~~~ JEEZ, GUY, YOU'VE SAID 'SAFE' A LOT. WHAT DO YOU MEAN WHEN YOU SAY THAT?

Hrm... that's a good point. I should clarify what that means.

"Safe" from the perspective of the validator / loader:
- The binary will not be writeable after being loaded.
  WHY: This seems obvious. If this breaks, other contraints break.
- The binary is statically linked with a start address of zero, and .text
  starts at 64K.
  WHY: This lets us insert trusted code in the bottom 64K.
- All indirect control transfers use the 'nacljmp' instruction, which is a
  combination of an 'and' and a 'jmp', forcing control flow to jump to 32-bit
  aligned addresses.
  WHY: This preserves control flow integrity.
- The binary is padded up to the nearest page with at least one 'hlt'
  instruction.
  WHY: No code execution is allowed to lazily NOP its way out of control
- The binary contains no instructions or pseudo-instructions overlapping a
  32-byte boundary.
  WHY: Control flow integrity! Targets jump to 32 byte boundaries, and are
  contrained to them.
- All valid instruction addresses are reachable by a all-through disassembly
  from the load address. The program may execute all of these reachable
  instruction blocks.
  WHY: More CFI! This is more of a capability than a constraint, but whatever...
- All direct control transfers target valid addresses.
  WHY: CFI. You got it. No jumping out of our expected locations.
- Self-modifying code is disallowed. Overlapping instructions are disallowed.
  WHY: ... Once again, pretty obvious. This stuff is dangerous.
- Executables may only include a subset of legal instructions. Disallowed instructions
  include syscall/int (syscalls must be made through the service runtime), instructions
  which modify segment state (lds, far calls, etc) and ret (returns are instead
  implemented with indirect jumps).
  WHY: If a full set of x86 instructions were allowed, then jumping out of the
  other contraints which have been set would be possible.

"Safe" from the perspective of the runtime:
- Programs may exercise the NaCl ABI to access the service runtime (they may
  pass invalid arguments if they want to).
- Programs may allocate memory and spawn threads, up to a resource limit.

~~~ SO HOW ARE THESE GUARANTEES MADE?

Well, as I mentioned earlier, they are enforced by the validator and the service
runtime.

The original NaCl (x86 only) used segmented memory to constrain data and instruction
references.

~~~ WHAT'S THIS CONTROL FLOW INTEGRITY YOU WON'T SHUT UP ABOUT?

It answers the question "where is our code allowed to jump / fall through to"?

For each direct branch, the target is statically computed, and confirmed to be valid.

(If you don't know what a direct branch is, it refers to an instruction which
hard-codes the address of memory. Think "jmp 0xFFFF0000". Indirect branches use
either registers or memory locations holding the address to jump to.)

For each indirect branch, segmented memory is used. The CS segment constrains
executable text to a zero-based address range (of size N * 4K). Once the text
segment is contrained by the hardware, a constant mask is used for all indirect
jumps, by aligning each 'jmp' to 32 bytes. These aligned jumps are called
'nacljmp', as mentioned earlier:

and   %eax, 0xffffffe0
jmp   *eax

This manages to achieve control flow integrity with a 5 byte instruction
sequence (3 bytes for 'and', 2 bytes for 'jmp'), instead of the 14 byte version
when segmentation is not used (6 byte 'and', 6 byte 'and', and a 2 byte
'jump').

~~~ AND HOW IS THIS ENFORCED?

The validator checks the binary before loading it into memory.

~~~ AH. BUT HOW CAN SYSTEM CALLS GET MADE WHEN EVERYTHING IS CONSTRAINED LIKE THIS?

Read on in the follow-up [post](service_runtime.txt)!
